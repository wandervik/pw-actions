name: S3 Continuous Deployment to dev

# on:
#   pull_request:
#     branches: [ 'release', 'master' ]
on:
  push:
    branches: [ main ]

env:
  AWS_REGION: "eu-central-1"
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_CDN_DISTRIBUTION: test-dist
  LAMBDA_FUNCTION: test-lambda


jobs:
  build-deploy-dev:
    # if: ${{ github.ref == 'refs/heads/release' }}
    runs-on: ubuntu-latest
    env:
     S3_PATH: test
     CDN_PATH: test

    environment: dev

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # - name: Set version
      #   id: set_var
      #   run: |
      #     content=`cat ./package.json`
      #     content="${content//'%'/'%25'}"
      #     content="${content//$'\n'/'%0A'}"
      #     content="${content//$'\r'/'%0D'}"
      #     echo "::set-output name=packageJson::$content"
      # - run: |
      #     echo "prev_version=${{fromJson(steps.set_var.outputs.packageJson).version}}" >> $GITHUB_ENV

      # - name:  'Automated Version Bump'
      #   uses:  'phips28/gh-action-bump-version@master'
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     minor-wording:  'add,Adds,new,feat,minor'
      #     major-wording:  'MAJOR,cut-major'
      #     patch-wording:  'patch,fixes'
      #     rc-wording:     'RELEASE,alpha'
      #     commit-message: 'Bumped version number. Current version: {{version}}'

      # - name: Set new version
      #   id: set_new_var
      #   run: |
      #     content=`cat ./package.json`
      #     content="${content//'%'/'%25'}"
      #     content="${content//$'\n'/'%0A'}"
      #     content="${content//$'\r'/'%0D'}"
      #     echo "::set-output name=packageJson::$content"
      # - run: |
      #     echo "new_version=${{fromJson(steps.set_new_var.outputs.packageJson).version}}" >> $GITHUB_ENV


      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Bash script
        run: |
          if [[ $(aws s3 ls s3://playwire-mobile-test/1.10.30 | head) ]]; then echo "do stuff"; else exit 1; fi

      # - name: Check if remote repositiry is exist
      #   id: check
      #   run: |
      #     directory_exist=$(aws s3 ls s3://playwire-mobile-test/1.10.1)
      #     echo "test: $directory_exist"
      #     echo "::set-output name=directory::$directory_exist"
      # - run: |
      #     echo "testdir=$ {{ steps.check.outputs.directory }}" >> $GITHUB_ENV
      #     echo "output: ${{ env.testdir }}"

      # - name: Check use
      #   run: echo "directory is ${{ steps.check.outputs.DIRECTORY }}"


      #     echo "::set-output name=directory::$directory_exist"
      # - run: |
      #     echo "DIRECTORY_EXIST=${{ steps.check.outputs.directory }}" >> $GITHUB_ENV


      # - name: Proceed with build Check
      #   if: ${{ env.DIRECTORY_EXIST == ''}}
      #   run: exit 1

      # - name: NPM build
      #   run: |
      #   uses: actions/setup-node@master
      #   with:
      #     node-version: 12
      # - run: npm run buildCDN:dev

# Debug msg versions:
# echo "old version is - ${{ env.prev_version }} and new version is - ${{ env.new_version }}"

# >>>>>>>>>>>>>>>>>>>>>> DEPLOY <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<




      # - name: Push to bucket
      #   run: |
      #     aws s3 sync dist s3://playwire-mobile-test/${{ env.new_version }} --acl public-read

      # - name: Invalidate CDN
      #   uses: chetan/invalidate-cloudfront-action@v2
      #   env:
      #     DISTRIBUTION: ${{ env.AWS_CDN_DISTRIBUTION }}
      #     PATHS: "/*"
      #     AWS_REGION: "eu-central-1"
      #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # - name: Put current version
      #   run: |
      #     version=${{ env.new_version }}
      #     python3 insert-version.py $version


      # - name: Deploy lambda
      #   uses: appleboy/lambda-action@master
      #   with:
      #     aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     aws_region: us-east-1
      #     function_name: ${{ env.LAMBDA_FUNCTION }}
      #     source: lambda-var.js
